<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ucore Lab05</title>
      <link href="/2020/05/16/ucore-lab05/"/>
      <url>/2020/05/16/ucore-lab05/</url>
      
        <content type="html"><![CDATA[<h1 id="Ucore-Lab05"><a href="#Ucore-Lab05" class="headerlink" title="Ucore Lab05"></a>Ucore Lab05</h1><h1 id="一、-操作系统原理"><a href="#一、-操作系统原理" class="headerlink" title="一、    操作系统原理"></a>一、    操作系统原理</h1><h2 id="1-1、-进程的状态转换"><a href="#1-1、-进程的状态转换" class="headerlink" title="1.1、  进程的状态转换"></a>1.1、  进程的状态转换</h2><h4 id="进程的三态模型"><a href="#进程的三态模型" class="headerlink" title="进程的三态模型"></a>进程的三态模型</h4><ul><li><p>运行态指进程占有处理器运行，处于运行态的进程个数不能大于处理器个数</p></li><li><p>就绪态指进程具备运行条件等待处理器运行</p></li><li><p>等待态指进程由于等待资源、输入输出、信号等而不具备运行条件</p><p>（1）运行态→等待态：出现等待事件，如等待资源、I/O、信号</p><p>（2）等待态→就绪态：等待事件完成，如资源满足、I/O结束、信号完成</p><p>（3）就绪态→运行态：处理器空闲时会选择更高优先权进程抢占</p><p>（4）运行态→就绪态：运行时间片到、有更高优先权进程</p><p>OS无法预期进程的数目与资源需求，计算机系统在运行过程中可能出现资源不足的情况，运行资源不足表现为性能低和死锁两种情况。 解决办法为进程挂起：剥夺某些进程的内存及其他资源，调入OS管理的对换区，不参加进程调度，待适当时候再调入内存、恢复资源、参与运行</p><p><img src="https://gitee.com/the-time-is-limitted/blog-img/raw/master/img/20200715162644.png" alt="image-20200715154745687"></p></li><li><p>一般选择等待态进程进入挂起等待态，也可选择就绪态进程进入挂起就绪态，运行态进程还可以挂起自己进入挂起就绪态</p></li><li><p>等待事件结束后，挂起等待态进入挂起就绪态，一般选择挂起就绪态进程予以恢复</p></li><li><p>挂起态与等待态有着本质区别，等待态占有已申请到的资源处于等待，挂起态没有任何资源</p></li></ul><h2 id="1-2、系统-中断响应的处理流程"><a href="#1-2、系统-中断响应的处理流程" class="headerlink" title="1.2、系统 中断响应的处理流程"></a>1.2、系统 中断响应的处理流程</h2><p>非屏蔽中断和异常的编号是固定的， 而屏蔽中断的编号可以通过对中断控制器的编程来调整。</p><p> 256个中断的分配如下：</p><ul><li>0~31号的中断对应于故障、 陷阱和非屏蔽外设中断。</li><li>32~47号的中断分配给可屏蔽外设中断。 </li><li>48~255号的中断可以用软件来设置，可以调用其中的一个中断号来实现系统调用。  </li></ul><p>​            <img src="https://gitee.com/the-time-is-limitted/blog-img/raw/master/img/20200715161601.png" alt>                                                                                              </p><h3 id="具体的执行流程"><a href="#具体的执行流程" class="headerlink" title="具体的执行流程"></a>具体的执行流程</h3><p><strong>(1) 中断响应的事前准备：</strong></p><p>　　系统要想能够应对各种不同的中断信号，总的来看就是需要知道每种信号应该由哪个中断服务程序负责以及这些中断服务程序具体是如何工作的。系统只有事前对这两件事都知道得很清楚，才能正确地响应各种中断信号和异常。</p><ul><li><p>系统将所有的中断信号统一进行了编号（一共256个：0～255），这个号称为中断向量，具体哪个中断向量表示哪种中断有的是规定好的，也有的是在给定范围内自行设定的。 中断向量和中断服务程序的对应关系主要是由IDT（中断向量表）负责。操作系统在IDT中设置好各种中断向量对应的中断描述符（一共有三类中断门描述符：任务门、中断门和陷阱门），留待CPU查询使用。而IDT本身的位置是由idtr保存的，当然这个地址也是由OS填充的。</p></li><li><p>中断服务程序具体负责处理中断（异常）的代码是由软件，也就是操作系统实现的，这部分代码属于操作系统内核代码。也就是说从CPU检测中断信号到加载中断服务程序以及从中断服务程序中恢复执行被暂停的程序，这个流程基本上是硬件确定下来的，而具体的中断向量和服务程序的对应关系设置和中断服务程序的内容是由操作系统确定的。</p></li></ul><p><strong>(2) CPU检查是否有中断/异常信号</strong></p><p> 　　CPU在执行完当前程序的每一条指令后，都会去确认在执行刚才的指令过程中中断控制器（如：8259A）是否发送中断请求过来，如果有那么CPU就会在相应的时钟脉冲到来时从总线上读取中断请求对应的中断向量[2]。</p><p>对于异常和系统调用那样的软中断，因为中断向量是直接给出的，所以和通过IRQ（中断请求）线发送的硬件中断请求不同，不会再专门去取其对应的中断向量。</p><p><strong>(3) 根据中断向量到IDT表中取得处理这个向量的中断程序的段选择符</strong></p><p>　　CPU根据得到的中断向量到IDT表里找到该向量对应的中断描述符，中断描述符里保存着中断服务程序的段选择符。</p><p><strong>(4) 根据取得的段选择符到GDT中找相应的段描述符</strong></p><p>　　CPU使用IDT查到的中断服务程序的段选择符从GDT中取得相应的段描述符，段描述符里保存了中断服务程序的段基址和属性信息，此时CPU就得到了中断服务程序的起始地址。这里，CPU会根据当前cs寄存器里的CPL和GDT的段描述符的DPL，以确保中断服务程序是高于当前程序的，如果这次中断是编程异常（如：int 80h系统调用），那么还要检查CPL和IDT表中中断描述符的DPL，以保证当前程序有权限使用中断服务程序，这可以避免用户应用程序访问特殊的陷阱门和中断门[3]。</p><p><strong>(5) CPU根据特权级的判断设定即将运行的中断服务程序要使用的栈的地址</strong></p><p>　　CPU会根据CPL和中断服务程序段描述符的DPL信息确认是否发生了特权级的转换，比如当前程序正运行在用户态，而中断程序是运行在内核态的，则意味着发生了特权级的转换，这时CPU会从当前程序的TSS信息（该信息在内存中的首地址存在TR寄存器中）里取得该程序的内核栈地址，即包括ss和esp的值，并立即将系统当前使用的栈切换成新的栈。这个栈就是即将运行的中断服务程序要使用的栈。紧接着就将当前程序使用的<strong>ss,esp</strong>压到新栈中保存起来。也就说比如当前在某个函数中，使用的栈，在中断发生时，需要切换新的栈。</p><p><strong>(6) 保护当前程序的现场</strong></p><p>　　CPU开始利用栈保护被暂停执行的程序的现场：依次压入当前程序使用的eflags，cs，eip，errorCode（如果是有错误码的异常）信息。</p><p><strong>(7) 跳转到中断服务程序的第一条指令开始执行</strong></p><p>　　CPU利用中断服务程序的段描述符将其第一条指令的地址加载到cs和eip寄存器中，开始执行中断服务程序。这意味着先前的程序被暂停执行，中断服务程序正式开始工作。</p><p><strong>(8) 中断服务程序处理完毕，恢复执行先前中断的程序</strong></p><p>　　在每个中断服务程序的最后，必须有中断完成返回先前程序的指令，这就是iret（或iretd）。程序执行这条返回指令时，会从栈里弹出先前保存的被暂停程序的现场信息，<strong>即eflags,cs,eip</strong>重新开始执行。</p><h1 id="二、-实验过程-问题回答"><a href="#二、-实验过程-问题回答" class="headerlink" title="二、 实验过程+问题回答"></a>二、 实验过程+问题回答</h1><p>ucore在lab5中提供用户态进程的创建和执行机制，给应用程序提供一个用户态的运行环境。 </p><h2 id="练习1：加载应用程序并执行（需要编码）"><a href="#练习1：加载应用程序并执行（需要编码）" class="headerlink" title="练习1：加载应用程序并执行（需要编码）"></a>练习1：加载应用程序并执行（需要编码）</h2><blockquote><p>do_execv函数调用load_icode（位于kern/process/proc.c中）来加载并解析一个处于内存中的ELF执行文件格式的应用程序，建立相应的用户内存空间来放置应用程序的代码段、数据段 等，且要设置好proc_struct结构中的成员变量trapframe中的内容，确保在执行此进程后，能 够从应用程序设定的起始执行地址开始执行。需设置正确的trapframe内容。</p></blockquote><p><code>load_icode</code> 先清空进程的中断帧，再重新设置进程的中断帧，使得在执行中断返回指令<code>iret</code>后，能够让CPU转到用户态特权级，并回到用户态内存空间，使用用户态的代码段、数据段和堆栈，且能够跳转到用户进程的第一条指令执行，并确保在用户态能够响应中断； </p><p><code>load_icode</code>函数需要填写的部分为：</p><ul><li>将<code>trapframe</code>的代码段寄存器设为用户态的代码段<code>USER_CS</code>；</li><li>将<code>trapframe</code>的数据段、附加段、堆栈段寄存器设为用户态的数据段<code>USER_DS</code>；</li><li>将<code>trapframe</code>的栈顶指针esp设为用户栈的栈顶<code>USTACKTOP</code>；</li><li>将<code>trapframe</code>的代码段寄存器EIP指针设为ELF的入口地址<code>elf-&gt;e_entry</code>；</li><li>将<code>trapframe</code>中EFLAGS设置为使能中断。</li></ul><pre class="line-numbers language-c"><code class="language-c">    tf<span class="token operator">-></span>tf_cs <span class="token operator">=</span> USER_CS<span class="token punctuation">;</span>    tf<span class="token operator">-></span>tf_ds <span class="token operator">=</span> tf<span class="token operator">-></span>tf_es <span class="token operator">=</span> tf<span class="token operator">-></span>tf_ss <span class="token operator">=</span> USER_DS<span class="token punctuation">;</span>    tf<span class="token operator">-></span>tf_esp <span class="token operator">=</span> USTACKTOP<span class="token punctuation">;</span>    tf<span class="token operator">-></span>tf_eip <span class="token operator">=</span> elf<span class="token operator">-></span>e_entry<span class="token punctuation">;</span>    tf<span class="token operator">-></span>tf_eflags <span class="token operator">=</span> FL_IF<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 问题1.1：请在实验报告中描述当创建一个用户态进程并加载了应用程序后，CPU是如何让这个应用程 序最终在用户态执行起来的。即这个用户态进程被ucore选择占用CPU执行（RUNNING态） 到具体执行应用程序第一条指令的整个经过。    </p></blockquote><ul><li><p>在经过调度器占用了CPU的资源之后，用户态进程调用了exec系统调用，从而转入到了系统调用的处理例程；</p></li><li><p>在经过了正常的中断处理例程之后，最终控制权转移到了<code>syscall.c</code>中的<code>syscall</code>函数，然后根据系统调用号转移给了<code>sys_exec</code>函数，在该函数中调用了<code>do_execve</code>函数来完成指定应用程序的加载；</p></li><li><p>在<code>do_execve</code>中进行了若干设置，包括推出当前进程的页表，换用kernel的PDT之后，使用<code>load_icode</code>函数，完成了对整个用户线程内存空间的初始化，包括堆栈的设置以及将ELF可执行文件的加载，之后通过<code>current-&gt;tf</code>指针修改了当前系统调用的<code>trapframe</code>，使得最终中断返回的时候能够切换到用户态，并且同时可以正确地将控制权转移到应用程序的入口处；</p></li><li><p>在完成了<code>do_exec</code>函数之后，进行正常的中断返回的流程，由于中断处理例程的栈上面的<code>eip</code>已经被修改成了应用程序的入口处，而<code>cs</code>上的<code>CPL</code>是用户态，因此<code>iret</code>进行中断返回的时候会将堆栈切换到用户的栈，并且完成特权级的切换，并且跳转到要求的应用程序的入口处；</p></li><li><p>应用程序具体执行的第一条指令由<code>trapframe</code>中<code>eip</code>的值给定。在<code>__trapret</code>返回后即转到新进程中的第一条指令执行。 </p></li></ul><h2 id="练习2：父进程复制自己的内存空间给子进程（需要编码）"><a href="#练习2：父进程复制自己的内存空间给子进程（需要编码）" class="headerlink" title="练习2：父进程复制自己的内存空间给子进程（需要编码）"></a>练习2：父进程复制自己的内存空间给子进程（需要编码）</h2><blockquote><p>创建子进程的函数do_fork在执行中将拷贝当前进程（即父进程）的用户内存地址空间中的合 法内容到新进程中（子进程），完成内存资源的复制。具体是通过copy_range函数（位于 kern/mm/pmm.c中）实现的，请补充copy_range的实现，确保能够正确执行。</p></blockquote><p>父进程调用fork系统调用生成子进程的过程： </p><ul><li>父进程调用fork系统调用，进入正常的中断处理机制，最终交由<code>syscall</code>函数进行处理，根据系统调用号，交由<code>sys_fork</code>函数处理，该函数进一步调用了<code>do_fork</code>函数，这个函数的作用是创建子进程，并且将父进程的内存空间复制给子进程；</li></ul><h5 id="do-fork函数与copy-range相关的步骤的具体执行流程"><a href="#do-fork函数与copy-range相关的步骤的具体执行流程" class="headerlink" title="do_fork函数与copy_range相关的步骤的具体执行流程"></a><code>do_fork</code>函数与<code>copy_range</code>相关的步骤的具体执行流程</h5><ul><li>do_fork函数调用copy_mm进行内存空间的复制，在该函数中，进一步调用了dup_mmap，在这个函数中，遍历了父进程的所有合法虚拟内存空间，如果这个页存在，则为子进程对应的同一个地址（但是页目录表是不一样的，因此不是一个内存空间）也申请分配一个物理页，并且将这些空间的内容复制到子进程的内存空间中去，具体进行内存复制的函数就是在本次练习中需要完善的copy_range；</li><li>在copy_range函数中，对需要复制的内存空间按照页为单位从父进程的内存空间复制到子进程的内存空间中去；</li></ul><p>一些用到的函数</p><pre class="line-numbers language-c++"><code class="language-c++">/*   alloc_proc:   create a proc struct and init fields (lab4:exercise1)*   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack*   copy_mm:      process "proc" duplicate OR share process "current"'s mm according clone_flags*                 if clone_flags & CLONE_VM, then "share" ; else "duplicate"*   copy_thread:  setup the trapframe on the  process's kernel stack top and*                 setup the kernel entry point and stack of process*   hash_proc:    add proc into proc hash_list*   get_pid:      alloc a unique pid for process*   wakeup_proc:  set proc->state = PROC_RUNNABLE* VARIABLES:*   proc_list:    the process set's list*   nr_process:   the number of process set*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">intdo_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {    int ret = -E_NO_FREE_PROC;    struct proc_struct *proc;    if (nr_process >= MAX_PROCESS) {        goto fork_out;    }    ret = -E_NO_MEM;    if ((proc = alloc_proc()) == NULL)        goto fork_out;    proc->parent = current;    if ((ret = setup_kstack(proc)) != 0)        goto fork_out;    if ((ret = copy_mm(clone_flags, proc)) != 0)        goto fork_out;    copy_thread(proc, stack, tf);    ret = proc->pid = get_pid();    hash_proc(proc);    set_links(proc);    wakeup_proc(proc);fork_out:    return ret;bad_fork_cleanup_kstack:    put_kstack(proc);bad_fork_cleanup_proc:    kfree(proc);    goto fork_out;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="copy-range函数具体执行流程："><a href="#copy-range函数具体执行流程：" class="headerlink" title="copy_range函数具体执行流程："></a><code>copy_range</code>函数具体执行流程：</h5><ul><li>找到父进程指定的某一物理页对应的内核虚拟地址</li><li>找到需要拷贝过去的子进程的对应物理页对应的内核虚拟地址；</li><li>将前者的内容拷贝到后者中去；</li><li>为子进程当前分配这一物理页映射上对应的在子进程虚拟地址空间里的一个虚拟页，为子进程的这个物理页和对应的线性虚拟地址建立映射关系；</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">copy_range</span><span class="token punctuation">(</span>pde_t <span class="token operator">*</span>to<span class="token punctuation">,</span> pde_t <span class="token operator">*</span>from<span class="token punctuation">,</span> uintptr_t start<span class="token punctuation">,</span> uintptr_t end<span class="token punctuation">,</span> bool share<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span>start <span class="token operator">%</span> PGSIZE <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">%</span> PGSIZE <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">USER_ACCESS</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// copy content by page unit.</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//call get_pte to find process A's pte according to the addr start</span>        pte_t <span class="token operator">*</span>ptep <span class="token operator">=</span> <span class="token function">get_pte</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>nptep<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptep <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            start <span class="token operator">=</span> <span class="token function">ROUNDDOWN</span><span class="token punctuation">(</span>start <span class="token operator">+</span> PTSIZE<span class="token punctuation">,</span> PTSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">char</span> <span class="token operator">*</span>src_kvaddr <span class="token operator">=</span> <span class="token function">page2kva</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>       找到父进程需要复制的物理页在内核地址空间中的虚拟地址，这是由于这个函数执行的时候使用的时内核的地址空间            <span class="token keyword">char</span> <span class="token operator">*</span>dst_kvaddr <span class="token operator">=</span> <span class="token function">page2kva</span><span class="token punctuation">(</span>npage<span class="token punctuation">)</span><span class="token punctuation">;</span>      找到子进程需要被填充的物理页的内核虚拟地址            <span class="token function">memcpy</span><span class="token punctuation">(</span>dst_kvaddr<span class="token punctuation">,</span> src_kvaddr<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  将父进程的物理页的内容复制到子进程中去            <span class="token function">page_insert</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> npage<span class="token punctuation">,</span> start<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>     建立子进程的物理页与虚拟页的映射关系    <span class="token punctuation">}</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    start <span class="token operator">+</span><span class="token operator">=</span> PGSIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h5><blockquote><p>请在实验报告中简要说明如何设计实现”Copy on Write 机制“，给出概要设计，鼓励给出详细设计。 </p></blockquote><p>“Copy on Write”机制的主要思想是使得进程执行fork系统调用进行复制的时候，父进程不会简单地将整个内存中的内容复制给子进程，而是暂时共享相同的物理内存页；而当其中一个进程需要对内存进行修改的时候，再额外创建一个自己私有的物理内存页，将共享的内容复制过去，然后在自己的内存页中进行修改。</p><p>要实现“Copy on Write机制”，那就需要对几个函数进行一定的修改</p><ul><li>在执行<code>do_fork</code>时，子进程的页目录表直接拷贝父进程的页目录表，而不是拷贝内核页目录表；在<code>dup_mmap</code>函数中，<code>copy_range</code>函数为子进程分配物理内存,而是将子进程和父进程的虚拟页映射上同一个物理页面，然后在分别在这两个进程的虚拟页对应的PTE部分将这个页置成是不可写的<br>首先在vmm.c中将dup_mmap中的share变量的值改为1，启用共享：<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">dup_mmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> mm_struct <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">struct</span> mm_struct <span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  bool share <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>在<code>pmm.c</code>中为<code>copy_range</code>添加对共享的处理，如果<code>share</code>条件变量为1，那么将子进程的页面映射到父进程的页面。<br>同时利用PTE中的保留位将这个页设置成共享的页面，如果应用程序试图写某一个共享页就会产生页访问异常，交给缺页处理程序进行异常处理，同时将父子进程的页目录表的写权限取消，保持只读的权限。这样一旦父子进程执行写操作时，就会发生页面访问异常，进入页面访问异常处理函数中，再进行内存拷贝操作，并恢复页目录表的写权限。</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">copy_range</span><span class="token punctuation">(</span>pde_t <span class="token operator">*</span>to<span class="token punctuation">,</span> pde_t <span class="token operator">*</span>from<span class="token punctuation">,</span> uintptr_t start<span class="token punctuation">,</span> uintptr_t end<span class="token punctuation">,</span> bool share<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptep <span class="token operator">&amp;</span> PTE_P<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nptep <span class="token operator">=</span> <span class="token function">get_pte</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span>E_NO_MEM<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        uint32_t perm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptep <span class="token operator">&amp;</span> PTE_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//get page from ptep</span>        <span class="token keyword">struct</span> Page <span class="token operator">*</span>page <span class="token operator">=</span> <span class="token function">pte2page</span><span class="token punctuation">(</span><span class="token operator">*</span>ptep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>page<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>share<span class="token punctuation">)</span> <span class="token punctuation">{</span>                这一步保证子进程与父进程对于这个共享页面都保持只读            <span class="token function">page_insert</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> page<span class="token punctuation">,</span> start<span class="token punctuation">,</span> perm <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>PTE_W<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">page_insert</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> page<span class="token punctuation">,</span> start<span class="token punctuation">,</span> perm <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>PTE_W<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// alloc a page for process B</span>            <span class="token keyword">struct</span> Page <span class="token operator">*</span>npage<span class="token operator">=</span><span class="token function">alloc_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assert</span><span class="token punctuation">(</span>npage<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            uintptr_t src_kvaddr <span class="token operator">=</span> <span class="token function">page2kva</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>            uintptr_t dst_kvaddr <span class="token operator">=</span> <span class="token function">page2kva</span><span class="token punctuation">(</span>npage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>dst_kvaddr<span class="token punctuation">,</span> src_kvaddr<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">page_insert</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> npage<span class="token punctuation">,</span> start<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>再将父进程的内存空间对应的所有Page结构的ref引用计数均加1，表示子进程也在使用这些内存</p></li><li><p>page fault部分：在page fault的ISR部分，新增加对当前的异常是否由于尝试写了某一个共享页面引起的，如果是的话，额外申请分配一个物理页面，然后将当前的共享页的内容复制过去，建立出错的线性地址与新创建的物理页面的映射关系，将PTE设置设置成非共享的；然后查询原先共享的物理页面是否还是由多个其他进程共享使用的，如果不是的话，就将对应的虚地址的PTE进行修改，删掉共享标记，恢复写标记；这样的话page fault返回之后就可以正常完成对虚拟内存的写操作了；</p></li></ul><h2 id="练习3：阅读分析源代码，理解进程执行-fork-exec-wait-exit-的实现，以及系统调用的实现（不需要编码）"><a href="#练习3：阅读分析源代码，理解进程执行-fork-exec-wait-exit-的实现，以及系统调用的实现（不需要编码）" class="headerlink" title="练习3：阅读分析源代码，理解进程执行 fork/exec/wait/exit 的实现，以及系统调用的实现（不需要编码）"></a>练习3：阅读分析源代码，理解进程执行 fork/exec/wait/exit 的实现，以及系统调用的实现（不需要编码）</h2><p>在执行了系统调用之后，会执行正常的中断处理流程，最终将控制权转移给syscall，之后根据系统调用号执行sys_fork函数，进一步执行了系统调用中实际进行处理的函数</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">do_fork</span><span class="token punctuation">(</span>uint32_t clone_flags<span class="token punctuation">,</span> uintptr_t stack<span class="token punctuation">,</span> <span class="token keyword">struct</span> trapframe <span class="token operator">*</span>tf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">do_yield</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">do_execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>binary<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">do_wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>code_store<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">do_kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fork实现："><a href="#fork实现：" class="headerlink" title="fork实现："></a>fork实现：</h3><ul><li><p>实际进行处理的<code>do_fork</code>函数首先检查当前总进程数目是否到达限制，如果到达限制，那么返回<code>E_NO_FREE_PROC</code>；</p></li><li><p>调用<code>alloc_proc</code>来申请一个初始化后的进程控制块；</p></li><li><p>调用<code>setup_kstack</code>为内核进程（线程）建立栈空间；</p></li><li><p>调用<code>copy_mm</code>拷贝或者共享内存空间；</p></li><li><p>调用<code>copy_thread</code>建立trapframe以及进程上下文；</p></li><li><p>调用<code>get_pid()</code>为进程分配一个PID；</p></li><li><p>调用<code>hash_proc(proc)</code>和<code>set_links(proc);将进程控制块</code>PCB`加入哈希表和放入可执行队列链表中</p></li></ul><ul><li>调用<code>wakeup_proc</code>将进程的状态设置为<code>runnable</code>，这样的话在之后就有可能由调度器将子进程运行起来了</li></ul><pre class="line-numbers language-c++"><code class="language-c++">intdo_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {    int ret = -E_NO_FREE_PROC;    struct proc_struct *proc;    if (nr_process >= MAX_PROCESS) {        goto fork_out;    }    ret = -E_NO_MEM;    *   alloc_proc:   create a proc struct and init fields (lab4:exercise1)    *   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack    *   copy_mm:      process "proc" duplicate OR share process "current"'s mm according clone_flags    *                 if clone_flags & CLONE_VM, then "share" ; else "duplicate"    *   copy_thread:  setup the trapframe on the  process's kernel stack top and    *                 setup the kernel entry point and stack of process    *   hash_proc:    add proc into proc hash_list    *   get_pid:      alloc a unique pid for process    *   wakeup_proc:  set proc->state = PROC_RUNNABLE    * VARIABLES:    *   proc_list:    the process set's list    *   nr_process:   the number of process set    */    //    1. call alloc_proc to allocate a proc_struct    //    2. call setup_kstack to allocate a kernel stack for child process    //    3. call copy_mm to dup OR share mm according clone_flag    //    4. call copy_thread to setup tf & context in proc_struct    //    5. insert proc_struct into hash_list && proc_list    //    6. call wakeup_proc to make the new child process RUNNABLE    //    7. set ret vaule using child proc's pid    if ((proc = alloc_proc()) == NULL)        goto fork_out;    proc->parent = current;    if ((ret = setup_kstack(proc)) != 0)        goto fork_out;    if ((ret = copy_mm(clone_flags, proc)) != 0)        goto fork_out;    copy_thread(proc, stack, tf);    ret = proc->pid = get_pid();    hash_proc(proc);    set_links(proc);    wakeup_proc(proc);fork_out:    return ret;bad_fork_cleanup_kstack:    put_kstack(proc);bad_fork_cleanup_proc:    kfree(proc);    goto fork_out;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exec实现："><a href="#exec实现：" class="headerlink" title="exec实现："></a>exec实现：</h3><ul><li>实际进行处理的<code>do_execve</code>函数检查进程名称的地址和长度是否合法，如果合法，那么将名称暂时保存在函数栈中；<ul><li>原先的内存内容不再需要，将原来进程的内存全部释放</li></ul></li></ul><pre class="line-numbers language-c++"><code class="language-c++"> if (mm != NULL) {        lcr3(boot_cr3);        if (mm_count_dec(mm) == 0) {            exit_mmap(mm);            put_pgdir(mm);            mm_destroy(mm);        }        current->mm = NULL;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用<code>load_icode</code>将要执行的进程代码加载进内存，建立用户态内存空间，同时设置好中断帧，就像是我们在练习一中所完成的那样，使得在最终<code>do_execve</code>函数调用中断返回之后可以跳转到指定的应用程序的入口处。而如果发生加载错误，进行对应的报错处理</li></ul><pre class="line-numbers language-c++"><code class="language-c++">    if ((ret = load_icode(binary, size)) != 0) {        goto execve_exit;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>调用<code>set_proc_name</code>设置进程名称。</li></ul><pre class="line-numbers language-c++"><code class="language-c++">intdo_execve(const char *name, size_t len, unsigned char *binary, size_t size) {    struct mm_struct *mm = current->mm;    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {        return -E_INVAL;    }    if (len > PROC_NAME_LEN) {        len = PROC_NAME_LEN;    }    char local_name[PROC_NAME_LEN + 1];    memset(local_name, 0, sizeof(local_name));    memcpy(local_name, name, len);    if (mm != NULL) {        lcr3(boot_cr3);        if (mm_count_dec(mm) == 0) {            exit_mmap(mm);            put_pgdir(mm);            mm_destroy(mm);        }        current->mm = NULL;    }    int ret;    if ((ret = load_icode(binary, size)) != 0) {        goto execve_exit;    }    set_proc_name(current, local_name);    return 0;execve_exit:    do_exit(ret);    panic("already exit: %e.\n", ret);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wait实现："><a href="#wait实现：" class="headerlink" title="wait实现："></a>wait实现：</h3><ul><li><p>首先检查用于保存返回码的<code>code_store</code>指针地址位于合法的范围内；</p></li><li><p><code>proc = find_proc(pid)</code>根据PID找到需要等待的子进程PCB</p><ul><li>实际进行处理的<code>do_wait</code>函数,传入参数<code>PID</code>如果不等于0，表示找一个进程id号为<code>pid</code>的退出状态的子进程，如果在执行调用过程中发现当前<code>pid</code>号的子进程为<code>PROC_ZOMBIE</code>状态就跳转到<code>found</code>函数历程执行</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        根据PID找到需要等待的子进程PCB<span class="token punctuation">,</span>如果没有需要等待的子进程，那么返回`E_BAD_PROC`        proc <span class="token operator">=</span> <span class="token function">find_proc</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proc <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> proc<span class="token operator">-></span>parent <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            haskid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token operator">-></span>state <span class="token operator">==</span> PROC_ZOMBIE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">goto</span> found<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果传入的参数pid=0，就可以找当前进程中任意一个处于退出<code>PROC_ZOMBIE</code>状态的子进程,找到就调到<code>found</code>函数历程进行处理</li></ul><pre class="line-numbers language-c++"><code class="language-c++">else {    proc = current->cptr;    for (; proc != NULL; proc = proc->optr) {        haskid = 1;        if (proc->state == PROC_ZOMBIE) {            goto found;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>接下来 <code>if (haskid)</code>判断是否有需要等待的子进程，如果没有直接返回<code>E_BAD_PROC</code>；</p></li><li><p>如果有需要等待的子进程，如果当前子进程的执行状态不为<code>PROC_ZOMBIE</code>，表明此子进程还没有退出，则当前进程只好设置自己的执行状态为<code>PROC_SLEEPING</code>，睡眠状态为<code>WT\_CHILD</code>，即此时在等待子进程退出，调用<code>schedule()</code>函数选择新的进程执行，自己睡眠等待，如果被唤醒，则重复跳回步骤1处执行</p></li><li><p>在<code>repeat</code>过程中如果此子进程的执行状态为<code>PROC_ZOMBIE</code>，表明此子进程处于退出状态，就可以执行<code>found</code>函数历程，需要当前进程（即子进程的父进程）完成对子进程的最终回收工作</p><ul><li>首先把子进程控制块从两个进程队列<code>proc_list</code>和<code>hash_list</code>中删除</li><li>并且释放子进程的内核堆栈和进程控制块。自此，子进程才彻底地结束了它的执行过程，释放了它所占用的所有资源。</li></ul></li></ul><pre class="line-numbers language-c++"><code class="language-c++">intdo_wait(int pid, int *code_store) {    struct mm_struct *mm = current->mm;    if (code_store != NULL) {        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {            return -E_INVAL;        }    }    struct proc_struct *proc;    bool intr_flag, haskid;repeat:    haskid = 0;    if (pid != 0) {        根据PID找到需要等待的子进程PCB,如果没有需要等待的子进程，那么返回`E_BAD_PROC`        proc = find_proc(pid);        if (proc != NULL && proc->parent == current) {            haskid = 1;            if (proc->state == PROC_ZOMBIE) {                goto found;            }        }    }    else {        proc = current->cptr;        for (; proc != NULL; proc = proc->optr) {            haskid = 1;            if (proc->state == PROC_ZOMBIE) {                goto found;            }        }    }    if (haskid) {        current->state = PROC_SLEEPING;        current->wait_state = WT_CHILD;        schedule();        if (current->flags & PF_EXITING) {            do_exit(-E_KILLED);        }        goto repeat;    }    return -E_BAD_PROC;found:    if (proc == idleproc || proc == initproc) {        panic("wait idleproc or initproc.\n");    }    if (code_store != NULL) {        *code_store = proc->exit_code;    }    local_intr_save(intr_flag);    {        unhash_proc(proc);        remove_links(proc);    }    local_intr_restore(intr_flag);    put_kstack(proc);    kfree(proc);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exit实现："><a href="#exit实现：" class="headerlink" title="exit实现："></a>exit实现：</h3><ul><li>实际进行处理的<code>do_exit</code>函数，首先释放进程的虚拟内存空间；</li></ul><pre class="line-numbers language-c++"><code class="language-c++">if (mm != NULL) {    lcr3(boot_cr3);    if (mm_count_dec(mm) == 0) {        exit_mmap(mm);        put_pgdir(mm);        mm_destroy(mm);    }    current->mm = NULL;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置当前进程状态为<code>PROC_ZOMBIE</code>同时设置返回码为<code>error_code</code>，来表示当前的进程已经不能被调度了，需要父进程来做最后的回收工作，表现为回收此进程的内核栈和进程控制块</li><li>如果当前进程的父进程<code>current-&gt;parent</code>处于等待子进程状态:<code>current-&gt;parent-&gt;wait_state==WT_CHILD</code>，则<code>wakup_proc(current-&gt;parent)</code>唤醒父进程，让父进程帮助自己完成最后的资源回收</li><li>如果当前进程还有子进程，则需要把这些子进程的父进程指针设置为内核线程<code>initproc</code>，且各个子进程指针需要插入到<code>initproc</code>的子进程链表中。如果某个子进程的执行状态是PROC_ZOMBIE，则需要唤醒<code>initproc</code>来完成对此子进程的最后回收工作</li><li>主动调用<code>schedule</code>调度函数让出CPU资源进行调度，等待父进程进一步完成其所有资源的回收；</li></ul><pre class="line-numbers language-c++"><code class="language-c++">intdo_exit(int error_code) {    if (current == idleproc) {        panic("idleproc exit.\n");    }    if (current == initproc) {        panic("initproc exit.\n");    }    struct mm_struct *mm = current->mm;    if (mm != NULL) {        lcr3(boot_cr3);        if (mm_count_dec(mm) == 0) {            exit_mmap(mm);            put_pgdir(mm);            mm_destroy(mm);        }        current->mm = NULL;    }    current->state = PROC_ZOMBIE;    current->exit_code = error_code;    bool intr_flag;    struct proc_struct *proc;    local_intr_save(intr_flag);    {        proc = current->parent;        if (proc->wait_state == WT_CHILD) {            wakeup_proc(proc);        }        while (current->cptr != NULL) {            proc = current->cptr;            current->cptr = proc->optr;            proc->yptr = NULL;            if ((proc->optr = initproc->cptr) != NULL) {                initproc->cptr->yptr = proc;            }            proc->parent = initproc;            initproc->cptr = proc;            if (proc->state == PROC_ZOMBIE) {                if (initproc->wait_state == WT_CHILD) {                    wakeup_proc(initproc);                }            }        }    }    local_intr_restore(intr_flag);    schedule();    panic("do_exit will not return!! %d.\n", current->pid);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问答-1"><a href="#问答-1" class="headerlink" title="问答"></a>问答</h4><blockquote><p>问题3.1: 请分析fork/exec/wait/exit在实现中是如何影响进程的执行状态的？</p></blockquote><ul><li><code>fork</code>：不会影响当前进程的执行状态，但是会将子进程的状态标记为RUNNALB，在后续CPU进程调度中运行起来；</li><li><code>exec</code>：不会影响当前进程的执行状态，但是会修改当前进程中执行的程序；</li><li><code>wait</code>：取决于是否存在可以释放资源（ZOMBIE）的子进程：<ul><li>有：不会发生状态的改变</li><li>没有：将当前进程置为SLEEPING态，等待执行了<code>exit</code>的子进程将其唤醒</li></ul></li><li><code>exit</code>：会将当前进程的状态修改为ZOMBIE态，并且会将父进程唤醒（修改为RUNNABLE），然后主动让出CPU使用权</li></ul><blockquote><p>问题3.2：请给出ucore中一个用户态进程的执行状态生命周期图（包执行状态，执行状态之间的变换关系，以及产生变换的事件或函数调用）。</p></blockquote><p>画出执行状态图如下所示：</p><p><img src="https://gitee.com/the-time-is-limitted/blog-img/raw/master/img/20200715164016.png" alt="用户态进程的执行状态生命周期图"></p>]]></content>
      
      
      <categories>
          
          <category> Ucore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ucore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis那么快的背后</title>
      <link href="/2020/02/16/redis-na-me-kuai-de-bei-hou/"/>
      <url>/2020/02/16/redis-na-me-kuai-de-bei-hou/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis 内置了复制（Replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（Transactions） 和不同级别的磁盘持久化（Persistence），并通过 Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（High Availability）。</p><a id="more"></a><h1 id="一、I-O-多路复用（-I-O-Multiplexing）"><a href="#一、I-O-多路复用（-I-O-Multiplexing）" class="headerlink" title="一、I/O 多路复用（ I/O Multiplexing）"></a>一、I/O 多路复用（ I/O Multiplexing）</h1><h2 id="1-1、传统-I-O-数据拷贝"><a href="#1-1、传统-I-O-数据拷贝" class="headerlink" title="1.1、传统 I/O 数据拷贝"></a>1.1、传统 I/O 数据拷贝</h2><p>当应用程序执行 read 系统调用读取文件描述符（FD）的时候，如果这块数据已经存在于用户进程的页内存中，就直接从内存中读取数据。如果数据不存在，则先将数据从磁盘加载数据到内核缓冲区中，再从内核缓冲区拷贝到用户进程的页内存中。（两次拷贝，两次 user 和 kernel 的上下文切换）。</p><p>为了解决阻塞的问题，我们有几个思路。<br>1、在服务端创建多个线程或者使用线程池，但是在高并发的情况下需要的线程会很多，系统无法承受，而且创建和释放线程都需要消耗资源。<br>2、由请求方定期轮询，在数据准备完毕后再从内核缓存缓冲区复制数据到用户空间（非阻塞式 I/O），这种方式会存在一定的延迟。</p><h2 id="1-2、redis是怎么使用单线程去处理多个客户端请求？"><a href="#1-2、redis是怎么使用单线程去处理多个客户端请求？" class="headerlink" title="1.2、redis是怎么使用单线程去处理多个客户端请求？"></a>1.2、redis是怎么使用单线程去处理多个客户端请求？</h2><p>答案：I/O 多路复用（ I/O Multiplexing）<br>I/O 指的是网络 I/O。<br>多路指的是多个 TCP 连接（Socket 或 Channel）。<br>复用指的是复用一个或多个线程。<br>它的基本原理就是不再由应用程序自己监视连接，而是由内核替应用程序监视文件描述符。</p><p> 客户端在操作的时候，会产生具有不同事件类型的 socket。在服务端，I/O 多路复<br>用程序（I/O Multiplexing Module）会把消息放入队列中，然后通过文件事件分派器（File<br>event Dispatcher），转发到不同的事件处理器中。  </p><p><img src="https://s2.ax1x.com/2020/02/26/3NfIOg.png" alt="avatar"></p><p>  多路复用有很多的实现，以 select 为例，当用户进程调用了多路复用器，进程会被阻塞。内核会监视多路复用器负责的所有 socket，当任何一个 socket 的数据准备好了，多路复用器就会返回。这时候用户进程再调用 read 操作，把数据从内核缓冲区拷贝到用户空间  </p><p>select函数原型</p><pre class="line-numbers language-c++"><code class="language-c++">#include <sys/select.h>/* According to earlier standards */#include <sys/time.h>#include <sys/types.h>#include <unistd.h>int select(int nfds, fd_set *readfds, fd_set *writefds,            fd_set *exceptfds, struct timeval *timeout);    nfds:         监控的文件描述符集里最大文件描述符加1，因为此参数会告诉内核检测前多少个文件描述符的状态    readfds：    监控有读数据到达文件描述符集合，传入传出参数    writefds：    监控写数据到达文件描述符集合，传入传出参数    exceptfds：    监控异常发生达文件描述符集合,如带外数据到达异常，传入传出参数    timeout：    定时阻塞监控时间，3种情况                1.NULL，永远等下去                2.设置timeval，等待固定时间                3.设置timeval里时间均为0，检查描述字后立即返回，轮询    struct timeval {        long tv_sec; /* seconds */        long tv_usec; /* microseconds */    };    void FD_CLR(int fd, fd_set *set);     //把文件描述符集合里fd清0    int FD_ISSET(int fd, fd_set *set);     //测试文件描述符集合里fd是否置1    void FD_SET(int fd, fd_set *set);     //把文件描述符集合里fd位置1    void FD_ZERO(fd_set *set);             //把文件描述符集合里所有位清0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">/* server.c */#define MAXLINE 80#define SERV_PORT 6666int main(int argc, char *argv[]){    int i, maxi, maxfd, listenfd, connfd, sockfd;    int nready, client[FD_SETSIZE];     /* FD_SETSIZE 默认为 1024 */    ssize_t n;    fd_set rset, allset;    char buf[MAXLINE];    char str[INET_ADDRSTRLEN];             /* #define INET_ADDRSTRLEN 16 */    socklen_t cliaddr_len;    struct sockaddr_in cliaddr, servaddr;    listenfd = Socket(AF_INET, SOCK_STREAM, 0);bzero(&servaddr, sizeof(servaddr));servaddr.sin_family = AF_INET;servaddr.sin_addr.s_addr = htonl(INADDR_ANY);servaddr.sin_port = htons(SERV_PORT);Bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr));Listen(listenfd, 20);         /* 默认最大128 */maxfd = listenfd;             /* 初始化 */maxi = -1;                    /* client[]的下标 */for (i = 0; i < FD_SETSIZE; i++)    client[i] = -1;         /* 用-1初始化client[] */FD_ZERO(&allset);FD_SET(listenfd, &allset); /* 构造select监控文件描述符集 */for ( ; ; ) {    rset = allset;             /* 每次循环时都从新设置select监控信号集 */    nready = select(maxfd+1, &rset, NULL, NULL, NULL);    if (nready < 0)        perr_exit("select error");    if (FD_ISSET(listenfd, &rset)) { /* new client connection */        cliaddr_len = sizeof(cliaddr);        connfd = Accept(listenfd, (struct sockaddr *)&cliaddr, &cliaddr_len);        printf("received from %s at PORT %d\n",                inet_ntop(AF_INET, &cliaddr.sin_addr, str, sizeof(str)),                ntohs(cliaddr.sin_port));        for (i = 0; i < FD_SETSIZE; i++) {            if (client[i] < 0) {                client[i] = connfd; /* 保存accept返回的文件描述符到client[]里 */                break;            }        }        /* 达到select能监控的文件个数上限 1024 */        if (i == FD_SETSIZE) {            fputs("too many clients\n", stderr);            exit(1);        }        FD_SET(connfd, &allset);     /* 添加一个新的文件描述符到监控信号集里 */        if (connfd > maxfd)            maxfd = connfd;         /* select第一个参数需要 */        if (i > maxi)            maxi = i;                 /* 更新client[]最大下标值 */        if (--nready == 0)            continue;                 /* 如果没有更多的就绪文件描述符继续回到上面select阻塞监听,                                        负责处理未处理完的就绪文件描述符 */        }        for (i = 0; i <= maxi; i++) {     /* 检测哪个clients 有数据就绪 */            if ( (sockfd = client[i]) < 0)                continue;            if (FD_ISSET(sockfd, &rset)) {                if ( (n = Read(sockfd, buf, MAXLINE)) == 0) {                    Close(sockfd);        /* 当client关闭链接时，服务器端也关闭对应链接 */                    FD_CLR(sockfd, &allset); /* 解除select监控此文件描述符 */                    client[i] = -1;                } else {                    int j;                    for (j = 0; j < n; j++)                        buf[j] = toupper(buf[j]);                    Write(sockfd, buf, n);                }                if (--nready == 0)                    break;            }        }    }    close(listenfd);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、-内存回收"><a href="#二、-内存回收" class="headerlink" title="二、 内存回收"></a>二、 内存回收</h1><h2 id="2-1、内存回收——-LRU-淘汰原理"><a href="#2-1、内存回收——-LRU-淘汰原理" class="headerlink" title="2.1、内存回收—— LRU 淘汰原理"></a>2.1、内存回收—— LRU 淘汰原理</h2><h4 id="问题1：基于一个数据结构做缓存，怎么实现-LRU——最长时间不被访问的元素在超过容量时删除？"><a href="#问题1：基于一个数据结构做缓存，怎么实现-LRU——最长时间不被访问的元素在超过容量时删除？" class="headerlink" title="问题1：基于一个数据结构做缓存，怎么实现 LRU——最长时间不被访问的元素在超过容量时删除？"></a>问题1：基于一个数据结构做缓存，怎么实现 LRU——最长时间不被访问的元素在超过容量时删除？</h4><p>常规的哈希表+双向链表<br>但存在的问题在于，基于传统的LRU算法实现Redis LRU需要额外的数据结构存储，消耗内存</p><p>Redis LRU 对传统的 LRU 算法进行了改良，通过随机采样来调整算法的精度。<br>如果淘汰策略是 LRU，则根据配置的采样值 maxmemory_samples（默认是 5 个）,<br>随机从数据库中选择 m 个 key, 淘汰其中热度最低的 key 对应的缓存数据。所以采样参数m配置的数值越大, 就越能精确的查找到待淘汰的缓存数据,但是也消耗更多的CPU计算,执行效率降低。<br>而听说 Redis LRU 算法在 sample 为 10 的情况下，已经能接近传统 LRU 算法了</p><h4 id="问题2：如何找出热度最低的数据？"><a href="#问题2：如何找出热度最低的数据？" class="headerlink" title="问题2：如何找出热度最低的数据？"></a>问题2：如何找出热度最低的数据？</h4><p>Redis 中所有对象结构都有一个 lru 字段, 且使用了 unsigned 的低 24 位，这个字段用来记录对象的热度。对象被创建时会记录 lru 值。在被访问的时候也会更新 lru 的值。</p><p>源码：server.c</p><pre class="line-numbers language-c++"><code class="language-c++">typedef struct redisObject {    unsigned type:4;    unsigned encoding:4;    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or    * LFU data (least significant 8 bits frequency    * and most significant 16 bits access time). */    int refcount;    void *ptr;} robj;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是对于访问时间的计算不是获取系统当前的时间戳，而是设置为全局变量 。Redis 中 有 个 定 时 处 理 的 函 数 serverCron ， 默 认 每 100 毫 秒 调 用 函 数updateCachedTime 更新一次全局变量的 server.lruclock 的值，它记录的是当前 unix时间戳。这样函数 lookupKey 中更新数据的 lru 热度值时,就不用每次调用系统函数 time，可以提高执行效率  Redis 中 有 个 定 时 处 理 的 函 数 serverCron ， 默 认 每 100 毫 秒 调 用 函 数updateCachedTime 更新一次全局变量的 server.lruclock 的值，它记录的是当前 unix时间戳。这样函数 lookupKey 中更新数据的 lru 热度值时,就不用每次调用系统函数 time，可以提高执行效率  </p><p>函数 estimateObjectIdleTime 评估指定对象的 lru 热度，思想就是对象的 lru 值和全局的 server.lruclock 的差值越大（越久没有得到更新）， 该对象热度越低。  </p><pre class="line-numbers language-c++"><code class="language-c++">/* Given an object returns the min number of milliseconds the object was never* requested, using an approximated LRU algorithm. */unsigned long long estimateObjectIdleTime(robj *o) {    unsigned long long lruclock = LRU_CLOCK();    if (lruclock >= o->lru) {        return (lruclock - o->lru) * LRU_CLOCK_RESOLUTION;    } else {        return (lruclock + (LRU_CLOCK_MAX - o->lru)) *LRU_CLOCK_RESOLUTION;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2、内存回收——-LFU-淘汰原理"><a href="#2-2、内存回收——-LFU-淘汰原理" class="headerlink" title="2.2、内存回收—— LFU 淘汰原理"></a>2.2、内存回收—— LFU 淘汰原理</h2><pre class="line-numbers language-c++"><code class="language-c++">typedef struct redisObject {    unsigned type:4;    unsigned encoding:4;    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or    * LFU data (least significant 8 bits frequency    * and most significant 16 bits access time). */    int refcount;    void *ptr;} robj;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  当这 24 bits 用作 LFU 时，其被分为两部分：高 16 位用来记录访问时间（低 8 位用来记录访问频率，简称 counter）。counter 是用基于概率的对数计数器实现的，8 位可以表示百万次的访问频率，对象被读写的时候，lfu 的值会被更新。  </p><h1 id="三、Redis的持久化方案"><a href="#三、Redis的持久化方案" class="headerlink" title="三、Redis的持久化方案"></a>三、Redis的持久化方案</h1><h2 id="3-1、RDB"><a href="#3-1、RDB" class="headerlink" title="3.1、RDB"></a>3.1、RDB</h2><p>RDB 是一个非常紧凑(compact)的文件，它保存了 redis 在某个时间点上的数据集。这种文件非常适合用于进行备份和灾难恢复。</p><p>这里就提一下bgsave，执行 bgsave 时，Redis 会在后台异步进行快照操作的同时还可以响应客户端请求。<br>具体操作是 Redis 进程执行 fork 操作创建子进程（copy-on-write），RDB 持久化过程由子进程负责，完成后自动结束。它不会记录 fork 之后后续的命令。阻塞只发生在fork 阶段，一般时间很短。</p><p>如果数据相对来说比较重要，希望将损失降到最小，则可以使用 AOF 方式进行持久</p><p>可以手动调用 lastsave 命令查看最近一次成功生成快照的时间  </p><h2 id="3-2、AOF"><a href="#3-2、AOF" class="headerlink" title="3.2、AOF"></a>3.2、AOF</h2><p> AOF 持久化是 Redis 不断将写命令记录到 AOF 文件中，随着 Redis 不断的进行，AOF 的文件会越来越大，文件越大，占用服务器内存越大以及 AOF 恢复要求时间越长。<br>为了解决这个问题，Redis 新增了重写机制，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。AOF 文件重写并不是对原文件进行重新整理，而是直接读取服务器现有的键值对，然后用一条命令去代替之前记录这个键值对的多条命令，生成一个新的文件后去替换原来的 AOF 文件 </p><p>可以使用命令 bgrewriteaof 来重写。</p><h1 id="四、Redis集群高可用下的数据分片"><a href="#四、Redis集群高可用下的数据分片" class="headerlink" title="四、Redis集群高可用下的数据分片"></a>四、Redis集群高可用下的数据分片</h1><p>  数据分片有几个关键的问题需要解决：<br>1、数据怎么相对均匀地分片<br>2、客户端怎么访问到相应的节点和数据<br>3、重新分片的过程，怎么保证正常服务  </p><p>针对Redis集群高可用下的数据分片，Redis 既没有用哈希取模，也没有用一致性哈希，而是用虚拟槽来实现的。Redis 创建了 16384 个槽（slot），每个节点负责一定区间的 slot。Redis 的每个 master 节点维护一个 16384 位（2048bytes=2KB）的位序列，比如：序列的第 0 位是 1，就代表第一个 slot 是它负责；序列的第 1 位是 0，代表第二个 slot不归它负责。当我们敲下set xx xx时候，Redis会通过对 key 用 CRC16 算法计算再%16384得到一个 slot的值，数据落到负责这个 slot 的 Redis 节点上。于是乎key 与 slot 的关系是永远不会变的，会变的只有 slot 和 Redis 节点的关系  </p><p>当然我们总有这样的需求，希望不同的key落到相同的Redis节点上，以减少网络io的次数，那么我们就可以通过</p><pre><code>set a{qs}a 1</code></pre><p>Redis 在计算槽编号的时候只会获取{}之间的字符串进行槽编号计算，  在 key 里面加入相同的{hash tag}保证上面两个不同的键被计算进入相同的槽中，这样就会落入redis集群中同一个节点中</p><h1 id="五、Redis数据与数据库数据的一致性问题"><a href="#五、Redis数据与数据库数据的一致性问题" class="headerlink" title="五、Redis数据与数据库数据的一致性问题"></a>五、Redis数据与数据库数据的一致性问题</h1><p><em><em>矛盾集中在：到底是先更新数据库，再删除缓存，还是先删除缓存，再更新数据库  </em></em></p><h2 id="5-1、先更新数据库，-再删除缓存"><a href="#5-1、先更新数据库，-再删除缓存" class="headerlink" title="5.1、先更新数据库， 再删除缓存"></a>5.1、先更新数据库， 再删除缓存</h2><p>正常情况：<br>更新数据库，成功。<br>删除缓存，成功。</p><p>异常情况：<br>1、更新数据库失败，程序捕获异常，不会走到下一步，所以数据不会出现不一致。<br>2、更新数据库成功，删除缓存失败。数据库是新数据，缓存是旧数据，发生了不一致的情况。</p><p><strong>异步更新缓存：</strong></p><p>因为更新数据库时会往 binlog 写入日志，所以我们可以通过一个服务来监听 binlog的变化（比如阿里的canal），然后在客户端完成删除 key 的操作。如果删除失败的话，再发送到消息队列。总之，对于后删除缓存失败的情况，我们的做法是不断地重试删除，直到成功。（摘自网络）</p><h2 id="5-2-先删除缓存，-再更新数据库"><a href="#5-2-先删除缓存，-再更新数据库" class="headerlink" title="5.2 先删除缓存， 再更新数据库"></a>5.2 先删除缓存， 再更新数据库</h2><p>正常情况：<br>删除缓存，成功。<br>更新数据库，成功。<br>异常情况：<br>1、删除缓存，程序捕获异常，不会走到下一步，所以数据不会出现不一致。<br>2、删除缓存成功，更新数据库失败。 因为以数据库的数据为准，所以不存在数据不一致的情况。</p><p><strong>看起来好像没问题，但是如果有程序并发操作的情况下：<br>1）线程 A 需要更新数据，首先删除了 Redis 缓存<br>2）线程 B 查询数据，发现缓存不存在，到数据库查询旧值，写入 Redis，返回<br>3）线程 A 更新了数据库<br>这个时候，Redis 是旧的值，数据库是新的值，发生了数据不一致的情况。<br>那问题就变成了：能不能让对同一条数据的访问串行化呢？代码肯定保证不了，因为有多个线程，即使做了任务队列也可能有多个服务实例。数据库也保证不了，因为会有多个数据库的连接。只有一个数据库只提供一个连接的情况下，才能保证读写的操作是串行的，或者我们把所有的读写请求放到同一个内存队列当中，但是这种情况吞吐量太低了。</strong><br>所以我们有一种延时双删的策略，在写入数据之后，再删除一次缓存。</p><p>A 线程：<br>1）删除缓存<br>2）更新数据库<br>3）休眠 500ms（这个时间，依据读取数据的耗时而定）<br>4）再次删除缓存</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
